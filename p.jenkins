#!groovy

//  groovy Jenkinsfile

properties([disableConcurrentBuilds()])

pipeline  {
    agent { 
        label 'master'
        }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
        timestamps()
    }
    stages {
        stage("Create docker image") {
            steps {
                echo 'Creating docker image ...'
                dir('.'){
                    sh "docker build -t kozyaranton/contact_dot_net . "
                }
            }
        }
        stage("docker login") {
            steps {
                echo " ============== docker login =================="
                withCredentials([usernamePassword(credentialsId: 'DockerHub-Credentials', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh '''
                    docker login -u $USERNAME -p $PASSWORD
                    '''
                }
            }
        }
        stage("docker push") {
            steps {
                echo " ============== pushing image =================="
                sh '''
                docker push kozyaranton/contact_dot_net:latest
                '''
            }
        }
        
        stage("docker stop") {
            steps {
                echo " ============== stoping all images =================="
				
				IMAGE_NAME="kozyaranton/contact_dot_net"
				
				if docker image ls -a "$IMAGE_NAME" | grep -Fq "$IMAGE_NAME" 1>/dev/null; then
					echo "Exist"
				fi
				
				
                sh '''
                docker stop contact_dot_net
                '''
            }
        } 
        stage("docker remove") {
            steps {
                echo " ============== removing all docker containers =================="
                sh '''
                docker rm contact_dot_net
                '''
            }
        }
        stage("docker run") {
            steps {
                echo " ============== starting contact_dot_net server =================="
                sh '''
                docker run -d --restart=always --name contact_dot_net -p 80:80 kozyaranton/contact_dot_net
                '''
            }
        }
        
        // stage("Deploy to stage server") {
        //     steps {
        //         echo " ============== Running playbook =================="
        //         sh '''
        //         ansible-playbook toolbox/ansible/playbooks/demloyToStageServer.yml
        //         '''
        //     }
        //}

    }
}